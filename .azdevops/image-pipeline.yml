# This pipeline tests the project and builds an image, which is pushed to a
# container registry for later use

trigger: 
  branches:
    include: 
    - lecattar/pipeline-scripts
  paths:
    exclude: 
    - .azdevops/*
    - hack/*
    include: 
    - .azdevops/deploy-pipeline.yml
    - .azdevops/deploy-template.yml
    - .azdevops/image-pipeline.yml
pr:
- master
variables:
- group: 'Metrics Adapter'
# This value is set for convenience of re-tagging the image later, but is otherwise irrelevant
- name: 'REGISTRY_PATH'
  value: ''
jobs:
- job:
  pool:
    vmImage: 'ubuntu-16.04'
  steps:

# Go workspace setup from https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/go?view=azure-devops
  - script: |
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      shopt -s extglob
      shopt -s dotglob
      mv !(go) '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'  
      cd $(modulePath) 
      go get -v -t -d ./... 
      if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
      fi
    displayName: 'Set up the Go workspace'
    
  - script: 'make build'
    workingDirectory: '$(modulePath)'
    displayName: 'make build (Verify autogenerated scripts/Run tests/Build image)'
    env:
      VERSION: $(Build.BuildId)

  - script: |
      # Should handle logging into docker hub as well as other repository
      if [[ $(DOCKER_USER) = $(REGISTRY) ]]; then
        echo "Logging in to docker hub"
        echo $(DOCKER_PWD) | docker login -u $(DOCKER_USER) --password-stdin
      else 
        echo "Logging in to other registry"
        echo $(DOCKER_PWD) | docker login -u $(DOCKER_USER) --password-stdin $(REGISTRY)
      fi
      # Instead of getting `make build` to build the name correctly, just retag
      docker tag $(REGISTRY)/adapter:$(Build.BuildId) $(IMAGE_REPOSITORY):$(Build.BuildId)
      docker push $(IMAGE_REPOSITORY):$(Build.BuildId)
    displayName: 'Push image'
