# This pipeline tests the project and builds an image, which is pushed to a
# container registry for later use

trigger: 
- 'master'
- 'lecattar/pipeline-scripts'
pr:
- master
variables:
- group: 'Metrics Adapter'
# These values are set for convenience of re-tagging the image later, but are otherwise irrelevant
- name: 'REGISTRY'
  value: 'local'
- name: 'REGISTRY_PATH'
  value: ''
jobs:
- job:
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: |
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      shopt -s extglob
      shopt -s dotglob
      mv !(go) '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'  
      cd $(modulePath) 
      go get -v -t -d ./... 
      if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
      fi
    displayName: 'Set up the Go workspace'
    
  - script: 'make build'
    workingDirectory: '$(modulePath)'
    displayName: 'make build (Verify autogenerated scripts/Run tests/Build image)'
    env:
      VERSION: $(Build.BuildId)

  - script: |
      # Should handle logging into docker hub as well as private repository
      if [[ ! $(DOCKER_USER) = $(REGISTRY) ]]; then
        echo $(DOCKER_PWD) | docker login -u $(DOCKER_USER) --password-stdin
      else 
        echo $(DOCKER_PWD) | docker login -u $(DOCKER_USER) --password-stdin $(REGISTRY)
      fi
      docker tag $(REGISTRY)/adapter:$(Build.BuildId) $(IMAGE_REPOSITORY):$(Build.BuildId)
      docker push $(IMAGE_REPOSITORY):$(Build.BuildId)
    displayName: 'Push image'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'